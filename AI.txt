//HMM FORWARD 

import sys
n=list(input("Enter the states (excluding start state)  :- ").split())
poss_ip=list(input("Enter the possible inputs in each state :- ").split())
poss_prob={}
for i in n:
    temp={}
    for j in poss_ip:
        x=float(input(f"Enter the probability for {j} in state {i} :- "))
        temp[j]=x
    if sum(temp.values())==1:
        poss_prob[i]=temp
    else:
        print("Invalid Input")
        print("Error")
        sys.exit(0)
    
    
n.insert(0,"S")
tpm={}
for i in n:
    temp1={}
    for j in n:
        val=float(input(f'Enter the probability value of P[{i}][{j}] :- '))
        temp1[j]=val
    if sum(temp1.values())==1:
        tpm[i]=temp1
    else:
        print("Invalid Input")
        print("Error")
        sys.exit(0)
    
print(n)
print(poss_ip)
print(poss_prob)
for i in tpm.keys():
    print(i,':',tpm[i])

sequence=input("Enter the input sequence for which prob value is to be found : ")
res_table={}
t={}
for j in range(1,len(n)):
    t[n[j]]=tpm['S'][n[j]]*poss_prob[n[j]][sequence[0]]
res_table[0]=t

for i in range(1,len(sequence)):
    t={}
    for j in range(1,len(n)):
        val=[]
        for k in range(1,len(n)):
            val.append(((res_table[i-1][n[k]])*(tpm[n[k]][n[j]])*(poss_prob[n[j]][sequence[i]])))
        t[n[j]]=sum(val)
    res_table[i]=t
    
print(res_table)
 
res_sum=sum(res_table[len(sequence)-1].values())     
print("the probability that sequence S is generated by the system is : ",res_sum)  



// MDP 

states=list(input("Enter the states of the MDP space separated :- ").split())
actions=list(input("Enter the actions performed in each state space separated :- ").split())
discount=float(input("Enter the discount factor :- "))
reward={}
for i in range(len(states)):
    reward[states[i]]=int(input(f"Enter the reward value for state {states[i]} :-   "))
"""prob_values={}
for i in states:
    t={}
    for j in actions:
        t1={}
        while sum(t1.values())<1:
            state_n=input(f"Enter the state reached ON {j} from {i} :- ")
            prob_val=float(input(f"Enter the probability of the value P({state_n}|{i},{j}) :- "))
            t1[state_n]=prob_val
        t[j]=t1
    prob_values[i]=t
print(prob_values)"""
prob_values={'PU': {'A': {'PU': 0.5, 'PF': 0.5}, 
        'S': {'PU': 1.0}}, 
 'PF': {'A': {'PF': 1.0}, 
        'S': {'PU': 0.5, 'RF': 0.5}}, 
 'RF': {'A': {'RF': 1.0},
        'S': {'RU': 0.5, 'RF': 0.5}}, 
 'RU': {'A': {'PU': 0.5, 'PF': 0.5}, 
        'S': {'RU': 0.5, 'PU': 0.5}}}

def close(a,b,thresh):
    for key in a:
        if abs(a[key] - b[key]) >= thresh:
            return False
    return True

print(reward)
res_rewards={}
pass_no=0
res_rewards[pass_no]=reward
pass_no+=1
while True:#tolerance value 0.05 maintained , if wanted this third value can be changed
    x={}
    for i in states:
        t2={}
        for j in prob_values[i]:
            val=0
            for k in prob_values[i][j]:
                val+=prob_values[i][j][k]*res_rewards[pass_no-1][k]
            t2[j]=val
        x[i]=reward[i]+discount*max(t2.values())
    res_rewards[pass_no]=x
    if close(res_rewards[pass_no],res_rewards[pass_no-1],0.05):
        break
    pass_no+=1
for i in res_rewards:
    print(i,":",res_rewards[i])



// HMM VITERBI

import sys
n=list(input("Enter the states (excluding start state)  :- ").split())
poss_ip=list(input("Enter the possible inputs in each state :- ").split())
poss_prob={}
for i in n:
    temp={}
    for j in poss_ip:
        x=float(input(f"Enter the probability for {j} in state {i} :- "))
        temp[j]=x
    if sum(temp.values())==1:
        poss_prob[i]=temp
    else:
        print("Invalid Input")
        print("Error")
        sys.exit(0)
    
    
n.insert(0,"S")
tpm={}
for i in n:
    temp1={}
    for j in n:
        val=float(input(f'Enter the probability value of P[{i}][{j}] :- '))
        temp1[j]=val
    if sum(temp1.values())==1:
        tpm[i]=temp1
    else:
        print("Invalid Input")
        print("Error")
        sys.exit(0)
    
print(n)
print(poss_ip)
print(poss_prob)
for i in tpm.keys():
    print(i,':',tpm[i])

sequence=input("Enter the input sequence for which prob vakue is to be found : ")
res_table={}
t={}
for j in range(1,len(n)):
    t[n[j]]=[tpm['S'][n[j]]*poss_prob[n[j]][sequence[0]],n[j]]
res_table[0]=t
for i in range(1,len(sequence)):
    t={}
    for j in range(1,len(n)):
        val=[]
        for k in range(1,len(n)):
            val.append(((res_table[i-1][n[k]][0])*(tpm[n[k]][n[j]])*(poss_prob[n[j]][sequence[i]])))
        t[n[j]]=[max(val),n[1+val.index(max(val))]]
    res_table[i]=t
    
for i in res_table.keys():
    print(i,':',res_table[i])
res_sequence=""
st=[]
for i in range(1,len(n)):
    st.append([res_table[len(res_table)-1][n[i]][0],res_table[len(res_table)-1][n[i]][1]])
start=max(st,key=lambda x:x[0])[1]
res_sequence+=start
keys_tb=list(res_table.keys())[::-1]
for i in keys_tb[1:]:
    res_sequence+=res_table[i][start][1]
    start=res_table[i][start][1]
res_sequence=res_sequence[::-1]
print("the possible state sequence for the given output S is : ",res_sequence)
 
